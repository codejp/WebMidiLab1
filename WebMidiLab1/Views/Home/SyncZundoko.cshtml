
@{
    ViewBag.Title = "Broad Sync Zundoko";
}

<script src="~/bower_components/webcomponentsjs/webcomponents.js"></script>
<link rel="import" href="~/bower_components/polymer/polymer.html">
<link rel="import" href="~/bower_components/x-webmidi/extras/wm-webmidilink/wm-webmidilink.html">
<link rel="import" href="~/bower_components/x-webmidi/extras/wm-pckeyboard/wm-pckeyboard.html">

<h2>Web MIDI API Demo - Broad Sync Zundoko</h2>

<wm-webmidilink id="wmlink"></wm-webmidilink>
<wm-pckeyboard id="pckeyboard"></wm-pckeyboard>

<div style="margin-top: 20px; font-size: 1.2em">
    MIDI Input: <select id="midi-input"><option>Select ...</option></select><span id="virtual-input"></span><br /><br />
    MIDI Output: <select id="midi-output"><option>Select ...</option></select><span id="virtual-output"></span><br /><br />
    <button id="zundokobtn" onclick="zundoko();">ずんどこぼたん</button>
</div>
<div id="msg" style="margin-top:30px; font-size: 1.2em"></div>
<div id="zundoko" style="margin-top:30px; font-size: 1.2em"></div>
@section scripts {
    <!--Script references. -->
    <!--The jQuery library is required and is referenced by default in _Layout.cshtml. -->
    <!--Reference the SignalR library. -->
    <script src="~/Scripts/jquery.signalR-2.2.1.min.js"></script>
    <!--Reference the autogenerated SignalR hub script. -->
    <script src="~/signalr/hubs"></script>
    <!--SignalR script to update the chat page and send messages.-->
    <script>
        var webMidi = $.connection.webMIDIHub;
        var bpm = 212;
        var tick = 60 / bpm * 1000 / 1;
        var tickHalf = 60 / bpm * 1000 / 2;
        var z = () => Math.round(Math.random());
        var zundoko = () => {
            $("#zundokobtn").disabled = true;
            $("#zundoko").empty();
            zundokoInternal();
        };
        var midiZun = () => {
            webMidi.server.webMIDIOutput(153, 41, 127);
            webMidi.server.webMIDIOutput(153, 36, 127);
            webMidi.server.webMIDIOutput(137, 41, 0);
            webMidi.server.webMIDIOutput(137, 36, 0);
        };
        var midiDoko = () => {
            webMidi.server.webMIDIOutput(153, 39, 127);
            webMidi.server.webMIDIOutput(153, 38, 127);
            webMidi.server.webMIDIOutput(153, 37, 127);
            webMidi.server.webMIDIOutput(137, 39, 0);
            webMidi.server.webMIDIOutput(137, 38, 0);
            webMidi.server.webMIDIOutput(137, 37, 0);
        };
        var midiKiyoshi = () => {
            webMidi.server.webMIDIOutput(153, 36, 127);
            webMidi.server.webMIDIOutput(153, 49, 127);
            webMidi.server.webMIDIOutput(137, 36, 0);
            webMidi.server.webMIDIOutput(137, 49, 0);
        };
        var midiHiHat = (lv) => {
            webMidi.server.webMIDIOutput(153, 42, lv);
            webMidi.server.webMIDIOutput(137, 42, 0);
        };
        var midiEm = (lv) => {
            webMidi.server.webMIDIOutput(150, 51, lv - 10);
            webMidi.server.webMIDIOutput(150, 54, lv - 10);
            webMidi.server.webMIDIOutput(150, 58, lv - 10);
        };
        var midiEmOff = () => {
            webMidi.server.webMIDIOutput(134, 51, 0);
            webMidi.server.webMIDIOutput(134, 54, 0);
            webMidi.server.webMIDIOutput(134, 58, 0);
        };
        var midiBf = (lv) => {
            webMidi.server.webMIDIOutput(150, 62, lv - 10);
            webMidi.server.webMIDIOutput(150, 65, lv - 10);
            webMidi.server.webMIDIOutput(150, 58, lv - 10);
        };
        var midiBfOff = () => {
            webMidi.server.webMIDIOutput(134, 62, 0);
            webMidi.server.webMIDIOutput(134, 65, 0);
            webMidi.server.webMIDIOutput(134, 58, 0);
        };
        var zundokoInternal = () => {
            let v = [''];
            let zundoko = "";
            for (let i = 0; i < 4; i++) v.push(z());

            v.splice(0, 1); v.push(z());
            let cnt = 0;
            v.forEach((element) =>  (element === 0 ? $("#zundoko").append('ズン') : $("#zundoko").append('ドコ')) | (++cnt === 1 ? $("#zundoko").append(' - ') : null));

            cnt = 0;
            v.forEach((element) =>  (element === 0 ? setTimeout(midiZun, tick * cnt++) : setTimeout(midiDoko, tick * cnt++)) | (cnt === 1 ? cnt++ : null));

            setTimeout(midiHiHat, tickHalf * 0, 100);
            setTimeout(midiHiHat, tickHalf * 1, 60);
            setTimeout(midiHiHat, tickHalf * 2, 80);
            setTimeout(midiHiHat, tickHalf * 3, 40);
            setTimeout(midiHiHat, tickHalf * 4, 100);
            setTimeout(midiHiHat, tickHalf * 5, 60);
            setTimeout(midiHiHat, tickHalf * 6, 99);
            setTimeout(midiHiHat, tickHalf * 7, 40);
            setTimeout(midiHiHat, tickHalf * 8, 107);
            setTimeout(midiHiHat, tickHalf * 9, 60);
            setTimeout(midiHiHat, tickHalf * 10, 80);
            setTimeout(midiHiHat, tickHalf * 11, 40);
            setTimeout(midiHiHat, tickHalf * 12, 107);

            setTimeout(midiEm, tickHalf * 0, 90);
            setTimeout(midiEmOff, tickHalf * 1);
            setTimeout(midiEm, tickHalf * 2, 80);
            setTimeout(midiEmOff, tickHalf * 3);

            setTimeout(midiBf, tickHalf * 4, 95);
            setTimeout(midiBfOff, tickHalf * 5);
            setTimeout(midiBf, tickHalf * 6, 90);
            setTimeout(midiBfOff, tickHalf * 7);

            setTimeout(midiEm, tickHalf * 8, 90);
            setTimeout(midiEmOff, tickHalf * 9);
            setTimeout(midiEm, tickHalf * 10, 85);
            setTimeout(midiEmOff, tickHalf * 11);

            if (String(v) !== String([0, 0, 0, 0, 1])) {

                $("#zundoko").append("<br />");
                setTimeout(midiHiHat, tickHalf * 13, 60);
                setTimeout(midiHiHat, tickHalf * 14, 80);
                setTimeout(midiHiHat, tickHalf * 15, 40);

                setTimeout(zundokoInternal, tick * 8);

                return;
            }

            setTimeout(midiKiyoshi, tickHalf * 12);
            setTimeout(midiKiyoshi, tickHalf * 13);
            setTimeout(midiKiyoshi, tickHalf * 14);

            setTimeout(midiEm, tickHalf * 12, 120);
            setTimeout(midiEm, tickHalf * 13, 120);
            setTimeout(midiEm, tickHalf * 14, 120);
            setTimeout(midiEmOff, tickHalf * 15);

            $("#zundoko").append('、キヨシ！');
            $("#zundokobtn").disabled = false;
        };
        $(function () {
            var midi = { "inputs": [], "outputs": [] };
            var midiInputIndex = 0;
            var midiOutputIndex = 0;

            // Reference the auto-generated proxy for the hub.
            //var webMidi = $.connection.webMIDIHub;

            // returns a Promise object representing a request for access to MIDI devices on the user's system.
            // Promise<MIDIAccess> requestMIDIAccess (optional MIDIOptions options);
            navigator.requestMIDIAccess({ sysex: false }).then(onMIDISuccess, onMIDIFailure);

            function onMIDISuccess(/*MIDIAccess*/ midiAccess) {

                // List MIDI Input devices
                var it = midiAccess.inputs.values();
                for (var input = it.next() ; !input.done; input = it.next()) {
                    midi.inputs.push(input.value);
                }
                // Add a virtual MIDI Input Device
                midi.inputs.push((document.querySelector("#pckeyboard")).getInput());

                // Show MIDI input devices
                var listInput = document.querySelector("#midi-input");
                for (var i = 0; i < midi.inputs.length; i++) {
                    listInput.appendChild(new Option(midi.inputs[i]["name"], i));
                }

                // When the input device is changed
                listInput.addEventListener("change", function (event) {

                    if (parseInt(event.target.value) >= 0) {
                        // Clear last onmidimessage handler
                        midi.inputs[midiInputIndex].onmidimessage = null;

                        // Set new onmidimessage handler of MIDIInput interface
                        midiInputIndex = event.target.value;
                        midi.inputs[midiInputIndex].onmidimessage = sendMIDIMessage;

                        // When the vertual MIDI Input device is selected
                        if (midi.inputs[midiInputIndex].virtual == true) {
                            document.querySelector("#virtual-input").appendChild(document.querySelector("#pckeyboard").getElement());
                        } else {
                            document.querySelector("#virtual-input").innerHTML = ""
                        }
                    }

                });

                // List MIDI Output devices
                var it = midiAccess.outputs.values();
                for (var output = it.next() ; !output.done; output = it.next()) {
                    midi.outputs.push(output.value);
                }
                // Add a virtual MIDI Output device
                midi.outputs.push((document.querySelector("#wmlink")).getOutput());

                // Show MIDI output devices
                var listOutput = document.querySelector("#midi-output");
                for (var i = 0; i < midi.outputs.length; i++) {
                    listOutput.appendChild(new Option(midi.outputs[i]["name"], i));
                }

                // When the MIDI output devices is changed
                listOutput.addEventListener("change", function (event) {

                    if (parseInt(event.target.value) >= 0) {
                        midiOutputIndex = event.target.value;

                        // When the vertual MIDI output device is selected
                        if (midi.outputs[midiOutputIndex].virtual == true) {
                            document.querySelector("#virtual-output").appendChild(document.querySelector("#wmlink").getElement());
                        } else {
                            document.querySelector("#virtual-output").innerHTML = ""
                        }
                    }

                });

                function sendMIDIMessage(/*MIDIMessageEvent*/ event) {

                    var status = (event.data[0] & 0xf0);
                    if (status == 0xb0 || status == 0x80 || status == 0x90) {
                        //$("#msg").empty();

                        //// Show MIDI message (Hex)
                        //for (var i = 0; i < event.data.length; i++) {
                        //    $("#msg").append("0x" + ("00" + event.data[i].toString(16)).substr(-2) + " ");
                        //}
                        //$("#msg").append("<br />");

                        //// Show MIDI message (Bin)
                        //for (var i = 0; i < event.data.length; i++) {
                        //    $("#msg").append(("0000000" + event.data[i].toString(2)).substr(-8) + " ");
                        //}
                        //$("#msg").append("<br />");

                        if (event.data.length == 3)
                            webMidi.server.webMIDIOutput(event.data[0], event.data[1], event.data[2]);
                    }
                }

                // Create a function that the hub can call back to display messages.
                webMidi.client.webMIDIInput = function (status, msg1, msg2) {
                    $("#msg").empty();
                    $("#msg").append("0x" + ("00" + status.toString(16)).substr(-2) + " ");
                    $("#msg").append("0x" + ("00" + msg1.toString(16)).substr(-2) + " ");
                    $("#msg").append("0x" + ("00" + msg2.toString(16)).substr(-2) + "<br />");
                    //$("#msg").append(("0000000" + status.toString(2)).substr(-8) + " ");
                    //$("#msg").append(("0000000" + msg1.toString(2)).substr(-8) + " ");
                    //$("#msg").append(("0000000" + msg2.toString(2)).substr(-8) + "<br />");

                    // Send MIDI message
                    if (parseInt(midiOutputIndex) >= 0) {
                        midi.outputs[midiOutputIndex].send([status, msg1, msg2]);
                        controlChange(status, msg1, msg2);
                    }
                };

                var bkcolor = { "r": 255, "g": 255, "b": 255 };

                function controlChange(status, msg1, msg2) {

                    if ((status & 0xf0) == 0xb0) {
                        var cv = (msg2 * 2) + 1;

                        switch (msg1) {
                            case 20:
                                bkcolor.r = cv;
                                break;
                            case 21:
                                bkcolor.g = cv;
                                break;
                            case 22:
                                bkcolor.b = cv;
                                break;
                            default:
                                break;
                        }

                        $("body").css('background-color', 'rgb(' + bkcolor.r + ', ' + bkcolor.g + ', ' + bkcolor.b + ')');
                        $("#msg").append($("body").css('background-color') + "<br />");
                    }
                }

                $.connection.hub.start().done();
            }

            function onMIDIFailure(msg) {
                alert("[ERROR] " + msg);
            }
        });
    </script>
}
